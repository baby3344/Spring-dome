<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.2.xsd"

>
    <!--扫描包中注解标注的类-->
    <context:component-scan base-package="cn.qwx"></context:component-scan>


    <cop:aspectj-autoproxy/>

    <!--通过bean元素声明需要Spring创建的实例。该实例的类型通过class属性指定，并通过id属性为该实例属性制定一个名称，以便于访问-->
    <bean id="helloSpring" class="cn.qwx.entity.HelloSpring">
       <!--property元素用来实例的属性赋值，
       此处实际是调用serWho()方法实现赋值操作-->
        <property name="who">
            <!--此处将字符创“Spring赋值给who属性”-->
            <value>Spring</value>
        </property>


    </bean>

    <bean id="user" class="cn.qwx.entity.User">
        <property name="id" value="12"></property>
        <property name="userName">
            <!--<value><![CDATA[张&三]]></value>-->
            <value>张&amp;三</value>
        </property>
        <property name="userPassword" value="123456"></property>

        <!--  注入List类型-->
        <property name="list">
            <list>
                <!-- 定义List中的元素-->
                <value>足球</value>
                <value>篮球</value>
            </list>
        </property>

        <!-- 注入数组类型 -->
        <property name="array">
            <list>
                <!--定义数组中的元素 -->
                <value>足球</value>
                <value>篮球</value>
            </list>
        </property>
        <!-- 注入Set类型-->
        <property name="set">
            <set>
                <!--定义Set或数组中的元素 -->
                <value>足球</value>
                <value>篮球</value>
            </set>
        </property>
        <!--注入Map类型 -->
        <property name="map">
            <map>
                <!--定义Map中的键值对 -->
                <entry>
                    <key>
                        <value>football</value>
                    </key>
                    <value>足球</value>
                </entry>
                <entry>
                    <key>
                        <value>basketball</value>
                    </key>
                    <value>篮球</value>
                </entry>
            </map>
        </property>
        <!--注入Properties类型-->
        <property name="props">
            <props>
                <!--定义Properties中的键值对-->
                <prop key="football">足球</prop>
                <prop key="basketball">篮球</prop>
            </props>
        </property>
        <!-- 注入空字符串值 -->
        <property name="emptyValue">
            <value></value>
        </property>
        <!-- 注入null值-->
        <property name="nullValue">
            <null/>
        </property>
    </bean>

    <!--（示例3）-->
    <bean id="user1" class="cn.qwx.entity.User">
        <property name="userName">
            <value>张三</value>
        </property>
        <property name="userPassword">
            <value>123456</value>
        </property>
    </bean>

    <!--(示例4(ch06))-->
    <bean id="user2" class="cn.qwx.entity.User" p:userName="张三" p:userPassword="123456"/>

    <!--引用其他Bean组件-->
    <!--定义userDao对象，并指定id为userDao-->
   <!-- <bean id="userDao" class="cn.qwx.dao.impl.UserDaoImpl"></bean>-->

    <!--定义userService对象，并指定id为定义userService-->
   <!-- <bean id="userService" class="cn.qwx.service.impl.UserServiceImpl">
         &lt;!&ndash;为userService的属性赋值，需要注意的是，这里调用setDao()方法&ndash;&gt;
        <property name="dao">
            &lt;!&ndash;引用id为userDao的对象为定义userService的到赋值&ndash;&gt;
            <ref bean="userDao"/>
        </property>
    </bean>-->

    <!--定义userService对象，并指定id为定义userService-->
    <bean id="userService1" class="cn.qwx.service.impl.UserServiceImpl">
        <!--为userService的属性赋值，需要注意的是，这里调用setDao()方法-->
        <property name="dao">
            <!--引用id为userDao的对象为定义userService的到赋值-->
            <ref local="userDao"/>
        </property>
    </bean>

    <!--定义userService对象，并指定id为定义userService-->
    <bean id="定义userService" class="cn.qwx.service.impl.UserServiceImpl">
        <!--为userService的属性赋值，需要注意的是，这里调用setDao()方法-->
        <property name="dao">
            <!--引用id为userDao的对象为定义userService的到赋值-->
            <bean class="cn.qwx.dao.impl.UserDaoImpl"/>
        </property>
    </bean>

        <!--定义墨盒-->
       <bean id="colorInk" class="cn.qwx.dao.impl.ColorInk"/>
        <bean id="greyInk" class="cn.qwx.dao.impl.GreyInk"/>
        <!--定义纸张-->
        <bean id="a4Paper" class="cn.qwx.dao.impl.TextPaper">
            <property name="charPerLine" value="10"/>
            <property name="lineParPage" value="8"/>
        </bean>

        <bean id="b5Paper" class="cn.qwx.dao.impl.TextPaper">
            <property name="charPerLine" value="6"/>
            <property name="lineParPage" value="5"/>
        </bean>
      <!-- 组装打印机使用b5纸张打印-->
        <bean id="printer" class="cn.qwx.entity.Printer">
            <property name="ink" ref="colorInk"/>
            <property name="paper" ref="b5Paper"/>
        </bean>

         <!--使用a4纸张打印-->
        <bean id="printer1" class="cn.qwx.entity.Printer">
        <property name="ink" ref="greyInk"/>
        <property name="paper" ref="a4Paper"/>
        </bean>

    <!--配置增强类-->
    <!--<bean id="theLogger" class="cn.qwx.aop.TheLogger"></bean>-->

    <!--配置aop-->
   <!--<aop:config>-->
    <!--定义切点-->
    <!--<aop:pointcut id="myPointcut" expression="execution(public int save(cn.qwx.entity.User) )"></aop:pointcut>-->
  <!-- <aop:pointcut id="myPointcut" expression="execution(* cn.qwx.service.*.*(..))"></aop:pointcut>
   <aop:aspect ref="theLogger">-->
    <!--将myBefore()方法定义为前置增强并引用myPointcut切入点-->
   <!-- <aop:before method="myBefore" pointcut-ref="myPointcut"></aop:before>-->
    <!--将myAfterReturning()方法定义为后置增强并引用myPointcut切入点，通过returning属性指定名为result的参数注入返回值-->
    <!--<aop:after-returning method="myAfterReturning" pointcut-ref="myPointcut" returning="result"></aop:after-returning>-->
    <!--定义异常抛出增强-->
   <!--<aop:after-throwing method="myError" pointcut-ref="myPointcut" throwing="e"/>-->
    <!--定义最终增强-->
  <!-- <aop:after method="myAfter" pointcut-ref="myPointcut"/>-->
    <!--定义环绕增强-->
  <!-- <aop:around method="aroundLogger" pointcut-ref="myPointcut"></aop:around>
    </aop:aspect>
   </aop:config>-->
</beans>